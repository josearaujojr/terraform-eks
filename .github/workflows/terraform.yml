name: Terraform EKS Pipeline

on:
  push:
    branches: [github]
  workflow_dispatch:
    inputs:
      action:
        description: 'Ação manual a ser executada (apply ou destroy)'
        required: false
        type: choice
        options:
          - apply
          - destroy

# Permissões para o token do GitHub Actions para autenticação OIDC com a AWS
permissions:
  id-token: write # Necessário para autenticação OIDC
  contents: read  # Necessário para fazer o checkout do código
  pull-requests: write # Opcional: para postar comentários do plano em PRs

env:
  # Região padrão da AWS
  AWS_DEFAULT_REGION: us-east-1
  # Variáveis do Terraform (prefixo TF_VAR_ é lido automaticamente)
  TF_VAR_cidr_block: ${{ secrets.CIDR_BLOCK }}
  TF_VAR_project_name: ${{ secrets.PROJECT_NAME }}
  TF_VAR_cluster_name: ${{ secrets.CLUSTER_NAME }}
  TF_VAR_aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
  # Configuração do Backend S3
  TF_BACKEND_BUCKET: "tf-state-777"
  TF_BACKEND_KEY: "app-eks/terraform.tfstate"

jobs:
  plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    outputs:
      tfplan_exitcode: ${{ steps.plan.outputs.exitcode }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionRole # <-- Crie este Role na sua conta AWS
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=${{ env.TF_BACKEND_BUCKET }}" -backend-config="key=${{ env.TF_BACKEND_KEY }}" -backend-config="region=${{ env.AWS_DEFAULT_REGION }}"

      - name: Terraform Plan
        id: plan
        run: terraform plan -input=false -no-color -out=tfplan
        continue-on-error: true # Continua para que possamos ver o plano mesmo se houver falha

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: tfplan

  apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: plan
    # Usa um ambiente para forçar uma aprovação manual antes de aplicar
    environment:
      name: production
      url: # Adicione a URL do seu ambiente, se tiver
    # Executa se for um push na main COM mudanças, OU se for um dispatch manual com a ação 'apply'
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.plan.outputs.tfplan_exitcode == 2) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionRole # <-- Crie este Role na sua conta AWS
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=${{ env.TF_BACKEND_BUCKET }}" -backend-config="key=${{ env.TF_BACKEND_KEY }}" -backend-config="region=${{ env.AWS_DEFAULT_REGION }}"

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan

      - name: Terraform Apply
        run: terraform apply -input=false tfplan

  destroy:
    name: 'Terraform Destroy'
    runs-on: ubuntu-latest
    # O destroy é um job manual, disparado pelo 'workflow_dispatch' com a ação 'destroy'
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionRole # <-- Crie este Role na sua conta AWS
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=${{ env.TF_BACKEND_BUCKET }}" -backend-config="key=${{ env.TF_BACKEND_KEY }}" -backend-config="region=${{ env.AWS_DEFAULT_REGION }}"

      - name: Terraform Destroy
        run: terraform destroy -auto-approve